<?php
/**
 * Script de Diagn√≥stico Simplificado - Discador v2.0
 */

echo "=== Diagn√≥stico do Sistema Discador v2.0 ===\n\n";

$status = ['success' => true, 'errors' => [], 'warnings' => []];

// 1. Verificar PHP
echo "1. Verificando PHP...\n";
echo "   Vers√£o: " . PHP_VERSION . "\n";

$required_extensions = ['pdo_mysql', 'json', 'mbstring', 'curl'];
$optional_extensions = ['redis', 'opcache'];

foreach ($required_extensions as $ext) {
    if (extension_loaded($ext)) {
        echo "   ‚úì {$ext}: OK\n";
    } else {
        echo "   ‚úó {$ext}: FALTANDO\n";
        $status['errors'][] = "Extens√£o PHP obrigat√≥ria faltando: {$ext}";
        $status['success'] = false;
    }
}

foreach ($optional_extensions as $ext) {
    if (extension_loaded($ext)) {
        echo "   ‚úì {$ext}: OK\n";
    } else {
        echo "   ! {$ext}: Recomendado\n";
        $status['warnings'][] = "Extens√£o PHP recomendada: {$ext}";
    }
}

// 2. Verificar Redis
echo "\n2. Verificando Redis...\n";
if (class_exists('Redis')) {
    try {
        $redis = new Redis();
        $host = $_ENV['REDIS_HOST'] ?? 'redis';
        $password = $_ENV['REDIS_PASSWORD'] ?? 'redis123';
        
        if ($redis->connect($host, 6379, 2)) {
            if ($password) {
                $redis->auth($password);
            }
            echo "   ‚úì Conex√£o: OK\n";
            echo "   ‚úì Host: {$host}\n";
            
            $info = $redis->info();
            echo "   ‚úì Vers√£o: " . ($info['redis_version'] ?? 'unknown') . "\n";
            echo "   ‚úì Mem√≥ria: " . ($info['used_memory_human'] ?? 'unknown') . "\n";
        } else {
            echo "   ‚úó Conex√£o: FALHOU\n";
            $status['errors'][] = "N√£o foi poss√≠vel conectar ao Redis";
            $status['success'] = false;
        }
    } catch (Exception $e) {
        echo "   ‚úó Erro: " . $e->getMessage() . "\n";
        $status['errors'][] = "Erro Redis: " . $e->getMessage();
        $status['success'] = false;
    }
} else {
    echo "   ! Extens√£o Redis n√£o encontrada\n";
    $status['warnings'][] = "Extens√£o Redis n√£o instalada";
}

// 3. Verificar Banco de Dados
echo "\n3. Verificando Banco de Dados...\n";
try {
    $host = $_ENV['DB_HOST'] ?? 'database';
    $dbname = $_ENV['DB_NAME'] ?? 'discador';
    $user = $_ENV['DB_USER'] ?? 'discador';
    $password = $_ENV['DB_PASSWORD'] ?? 'discador123';
    
    $pdo = new PDO("mysql:host={$host};dbname={$dbname}", $user, $password);
    echo "   ‚úì Conex√£o: OK\n";
    echo "   ‚úì Host: {$host}\n";
    echo "   ‚úì Banco: {$dbname}\n";
    
    $version = $pdo->query('SELECT VERSION()')->fetchColumn();
    echo "   ‚úì Vers√£o: {$version}\n";
} catch (Exception $e) {
    echo "   ‚úó Erro: " . $e->getMessage() . "\n";
    $status['errors'][] = "Erro Banco de Dados: " . $e->getMessage();
    $status['success'] = false;
}

// 4. Verificar Diret√≥rios
echo "\n4. Verificando Diret√≥rios...\n";
$required_dirs = ['logs', 'tmp', 'backup'];
$base_path = realpath(__DIR__ . '/..');

foreach ($required_dirs as $dir) {
    $path = $base_path . '/' . $dir;
    if (is_dir($path)) {
        if (is_writable($path)) {
            echo "   ‚úì {$dir}: OK (escrita permitida)\n";
        } else {
            echo "   ! {$dir}: OK (sem permiss√£o de escrita)\n";
            $status['warnings'][] = "Diret√≥rio sem permiss√£o de escrita: {$dir}";
        }
    } else {
        echo "   ! {$dir}: N√ÉO EXISTE (ser√° criado automaticamente)\n";
        $status['warnings'][] = "Diret√≥rio ser√° criado automaticamente: {$dir}";
    }
}

// Verificar diret√≥rio config
$config_dir = __DIR__ . '/config';
if (is_dir($config_dir)) {
    echo "   ‚úì config: OK\n";
} else {
    echo "   ‚úó config: N√ÉO EXISTE\n";
    $status['errors'][] = "Diret√≥rio de configura√ß√£o n√£o existe";
    $status['success'] = false;
}

// 5. Verificar Configura√ß√µes
echo "\n5. Verificando Configura√ß√µes...\n";
$config_file = __DIR__ . '/config/config.php';
if (file_exists($config_file)) {
    echo "   ‚úì config.php: OK\n";
} else {
    echo "   ‚úó config.php: N√ÉO ENCONTRADO\n";
    $status['errors'][] = "Arquivo de configura√ß√£o n√£o encontrado";
    $status['success'] = false;
}

// 6. Teste de Performance
echo "\n6. Teste de Performance...\n";
$start = microtime(true);
for ($i = 0; $i < 10000; $i++) {
    $dummy = md5($i);
}
$end = microtime(true);
$time = round(($end - $start) * 1000, 2);
echo "   ‚úì Teste CPU: {$time}ms (10K md5)\n";

// 7. Verificar Asterisk (se configurado)
echo "\n7. Verificando Asterisk...\n";
$asterisk_host = $_ENV['ASTERISK_HOST'] ?? 'asterisk';
$asterisk_port = 5038;

$socket = @fsockopen($asterisk_host, $asterisk_port, $errno, $errstr, 2);
if ($socket) {
    echo "   ‚úì Asterisk AMI: OK ({$asterisk_host}:{$asterisk_port})\n";
    fclose($socket);
} else {
    echo "   ! Asterisk AMI: N√£o acess√≠vel ({$asterisk_host}:{$asterisk_port})\n";
    $status['warnings'][] = "Asterisk AMI n√£o acess√≠vel";
}

// 8. Resumo
echo "\n" . str_repeat("=", 50) . "\n";
echo "RESUMO DO DIAGN√ìSTICO\n";
echo str_repeat("=", 50) . "\n";

if ($status['success']) {
    echo "‚úÖ STATUS GERAL: OK\n";
} else {
    echo "‚ùå STATUS GERAL: PROBLEMAS ENCONTRADOS\n";
}

if (!empty($status['errors'])) {
    echo "\nüî¥ ERROS:\n";
    foreach ($status['errors'] as $error) {
        echo "   - {$error}\n";
    }
}

if (!empty($status['warnings'])) {
    echo "\nüü° AVISOS:\n";
    foreach ($status['warnings'] as $warning) {
        echo "   - {$warning}\n";
    }
}

echo "\nDiagn√≥stico conclu√≠do em " . date('Y-m-d H:i:s') . "\n";

// Retornar c√≥digo de sa√≠da apropriado
exit($status['success'] ? 0 : 1);
?>
