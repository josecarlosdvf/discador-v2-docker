# Script de Instala√ß√£o do Billing Multi-Tenant
# Executa a instala√ß√£o completa do schema de billing

Write-Host "üöÄ INSTALA√á√ÉO DO BILLING E CENTRO DE CUSTOS" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan
Write-Host ""

# Verificar se est√° no diret√≥rio correto
if (-not (Test-Path "src\Core\BillingManager.php")) {
    Write-Host "‚ùå Execute este script a partir do diret√≥rio raiz do projeto" -ForegroundColor Red
    exit 1
}

# Verificar se PHP est√° dispon√≠vel
try {
    $phpVersion = php -v 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå PHP n√£o encontrado. Certifique-se de que PHP est√° instalado e no PATH" -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ PHP encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao verificar PHP: $_" -ForegroundColor Red
    exit 1
}

# Verificar conex√£o com banco
Write-Host "üîç Verificando conex√£o com banco de dados..."
$testDb = php -f "test_db_connection.php"
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Falha na conex√£o com banco de dados" -ForegroundColor Red
    Write-Host "   Verifique as configura√ß√µes em src/config/database.php" -ForegroundColor Yellow
    exit 1
}
Write-Host "‚úÖ Conex√£o com banco OK" -ForegroundColor Green

# Executar instala√ß√£o do schema
Write-Host ""
Write-Host "üì¶ Instalando schema de billing..." -ForegroundColor Yellow
$installResult = php -f "scripts\install_billing.php"
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Falha na instala√ß√£o do schema" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üéØ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "   1. Acesse o painel de billing: http://localhost/src/billing.php" -ForegroundColor White
Write-Host "   2. Configure tarifas personalizadas por empresa" -ForegroundColor White
Write-Host "   3. Teste as APIs: http://localhost/src/api/billing-reports.php" -ForegroundColor White
Write-Host "   4. Configure alertas autom√°ticos" -ForegroundColor White
Write-Host ""
Write-Host "üîß Comandos √∫teis:" -ForegroundColor Cyan
Write-Host "   - Processar custos: POST /src/api/billing-reports.php?action=process_costs" -ForegroundColor White
Write-Host "   - Gerar fatura: POST /src/api/billing-reports.php?action=generate_invoice" -ForegroundColor White
Write-Host "   - Ver estat√≠sticas: GET /src/api/billing-reports.php?action=company_stats" -ForegroundColor White
Write-Host ""

# Op√ß√£o de teste r√°pido
$teste = Read-Host "Deseja executar um teste r√°pido das APIs? (y/N)"
if ($teste.ToLower() -eq "y") {
    Write-Host ""
    Write-Host "üß™ Executando testes b√°sicos..." -ForegroundColor Yellow
    
    # Teste b√°sico da API
    try {
        $testResult = Invoke-WebRequest -Uri "http://localhost/src/api/billing-reports.php?action=stats" -Method GET -ErrorAction Stop
        if ($testResult.StatusCode -eq 200) {
            Write-Host "‚úÖ API de billing respondendo" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  API retornou status: $($testResult.StatusCode)" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ùå Erro ao testar API: $_" -ForegroundColor Red
        Write-Host "   Certifique-se de que o servidor web est√° rodando" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "‚ú® Sistema de Billing Multi-Tenant est√° pronto para uso!" -ForegroundColor Green
